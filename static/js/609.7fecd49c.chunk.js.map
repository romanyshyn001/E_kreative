{"version":3,"file":"static/js/609.7fecd49c.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Pagination/Pagination.module.css?4da5","components/Pagination/Pagination.jsx","webpack://my-app/./src/pages/Post/PostsMain.module.css?2a59","webpack://my-app/./src/pages/Post/AddPost/AddNewPost.module.css?f5f2","pages/Post/AddPost/AddNewPost.jsx","webpack://my-app/./src/pages/Post/DeletePost/DeleteItem.module.css?80df","pages/Post/DeletePost/DeleteItem.jsx","webpack://my-app/./src/pages/Comments/AddComment/AddNewComment.module.css?a040","redux/slices/commentSlices/commentSelectors.js","pages/Comments/AddComment/AddNewComment.jsx","webpack://my-app/./src/pages/Comments/CommentsMain.module.css?e3c8","webpack://my-app/./src/pages/Comments/DeleteComment/RemoveComment.module.css?bd92","pages/Comments/DeleteComment/RemoveComment.jsx","webpack://my-app/./src/pages/Comments/UpdateComment/UpdateReply.module.css?1810","pages/Comments/UpdateComment/UpdateReply.jsx","pages/Comments/CommentsManage.jsx","pages/Comments/CommentsMain.jsx","webpack://my-app/./src/pages/Post/UpdatePost/UpdatePostMain.module.css?5822","pages/Post/UpdatePost/UpdatePostMain.jsx","pages/Post/PostsManage.jsx","redux/slices/postSlices/postsSelectors.js","pages/Post/PostsMain.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"Pagination_pagination__eyq6I\",\"active\":\"Pagination_active__gBX40\",\"selectedPage\":\"Pagination_selectedPage__Tehc2\"};","import React from \"react\";\r\nimport s from \"./Pagination.module.css\";\r\n\r\nconst Pagination = (props) => {\r\n  let pagesCount = Math.ceil(props.totalPostCount / props.perPage);\r\n  let pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n  \r\n  return (\r\n    <nav className={s.pagination}>\r\n      {pages.map((page) => {\r\n        return (\r\n          <span\r\n            className={props.currentPage === page ? s.selectedPage : null}\r\n            onClick={() => props.onChange(page)}\r\n            key={page}\r\n          >\r\n            {page}\r\n          </span>\r\n        );\r\n      })}\r\n    </nav>\r\n  );\r\n};\r\nexport default Pagination;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"containerPost\":\"PostsMain_containerPost__Apitp\",\"container\":\"PostsMain_container__vTrQQ\",\"mainSection\":\"PostsMain_mainSection__YI6oF\",\"info\":\"PostsMain_info__Z7wq2\",\"action\":\"PostsMain_action__6-IiA\",\"btn\":\"PostsMain_btn__lJKNR\",\"hidden\":\"PostsMain_hidden__48MWt\",\"messageError\":\"PostsMain_messageError__Cfb9l\",\"addComment\":\"PostsMain_addComment__xn4yM\"};","// extracted by mini-css-extract-plugin\nexport default {\"postTitle\":\"AddNewPost_postTitle__Mfph1\",\"textInput\":\"AddNewPost_textInput__zZ2F+\",\"btn\":\"AddNewPost_btn__eZZi2\",\"handlesPostStatus\":\"AddNewPost_handlesPostStatus__+87tu\",\"userError\":\"AddNewPost_userError__6uMDc\"};","import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  addPostLoading,\r\n  defaultError,\r\n} from \"../../../redux/slices/postSlices/posts\";\r\nimport s from \"./AddNewPost.module.css\";\r\n\r\nconst AddPost = (props) => {\r\n  const errorStatus = props.errorStatus;\r\n  const dispatch = useDispatch();\r\n  const user = JSON.parse(window.localStorage.getItem(\"user\"));\r\n\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n  const [buttonStatus, setButtonStatus] = useState(false);\r\n\r\n  const addTitle = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n  const addBody = (e) => {\r\n    setBody(e.target.value);\r\n  };\r\n\r\n  const onSavePostClicked = () => {\r\n    const createdAt = new Date().toISOString();\r\n    if (user) {\r\n      if (title && body) {\r\n        const options = {\r\n          title: title,\r\n          body: body,\r\n          userId: user.id,\r\n          createdAt: createdAt,\r\n        };\r\n        dispatch(addPostLoading(options));\r\n        setTitle(\"\");\r\n        setBody(\"\");\r\n      }\r\n    } else {\r\n      setButtonStatus(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorStatus === \"addRejected\") {\r\n      setErrorMessage(\"*Something went wrong... Try again later\");\r\n    }\r\n\r\n    return () => {\r\n      setTimeout(() => {\r\n        dispatch(defaultError());\r\n        setErrorMessage(\"\");\r\n      }, 10000);\r\n      setButtonStatus(false);\r\n    };\r\n  }, [dispatch, setErrorMessage, errorStatus]);\r\n\r\n  return (\r\n    <section>\r\n      <h2>What's on your mind?</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          className={s.postTitle}\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          onChange={addTitle}\r\n          value={title}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          className={s.textInput}\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          onChange={addBody}\r\n          value={body}\t\r\n        />\r\n      </form>\r\n      <div className={s.handlesPostStatus}>\r\n        {buttonStatus && (\r\n          <div>\r\n            <span className={s.userError}>*You are not autorized</span>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <span className={s.userError}>{errorMessage}</span>\r\n        </div>\r\n        <button className={s.btn} type=\"button\" onClick={onSavePostClicked}>\r\n          Add post\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default AddPost;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"DeleteItem_btn__eVBzT\",\"messageError\":\"DeleteItem_messageError__FzcXA\",\"action\":\"DeleteItem_action__iGuQ5\",\"removePost\":\"DeleteItem_removePost__l84xy\"};","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  defaultError,\r\n  postLoading,\r\n  removePostLoading,\r\n} from \"../../../redux/slices/postSlices/posts\";\r\nimport s from \"./DeleteItem.module.css\";\r\n\r\nconst DeleteItem = (props) => {\r\n  const currentPage = props.currentPage;\r\n  const perPage = props.perPage;\r\n  const errorStatus = props.errorStatus;\r\n\r\n  const [removeStatus, setRemoveStatus] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const removePostHandle = (value) => {\r\n    dispatch(removePostLoading(value));\r\n    dispatch(postLoading({ currentPage, perPage }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorStatus === \"removeRejected\") {\r\n      setRemoveStatus(\"*Can not remove post.\");\r\n      setTimeout(() => {\r\n        dispatch(defaultError());\r\n        setRemoveStatus(\"\");\r\n      }, 2000);\r\n    }\r\n  }, [dispatch, errorStatus]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button\r\n          className={s.btn}\r\n          type=\"submit\"\r\n          onClick={() => removePostHandle(props.post)}\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n      <div className={s.removePost}>\r\n        <span className={s.messageError}>{removeStatus}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default DeleteItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"AddNewComment_btn__2TftE\",\"replyBtn\":\"AddNewComment_replyBtn__rTZ+z\",\"commentPost\":\"AddNewComment_commentPost__PM5Nh\",\"save\":\"AddNewComment_save__WV1iJ\",\"addContainer\":\"AddNewComment_addContainer__WAGt+\"};","import { createSelector } from \"reselect\";\r\n\r\nconst getComment = (state) => {\r\n  return state.comment;\r\n};\r\n\r\nexport const commentSelector = createSelector(getComment, (comment) => {\r\n  return comment;\r\n});\r\n","import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  addCommentLoading,\r\n  defaultError,\r\n} from \"../../../redux/slices/commentSlices/comments\";\r\nimport s from \"./AddNewComment.module.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { commentSelector } from \"../../../redux/slices/commentSlices/commentSelectors\";\r\n\r\nconst AddNewComment = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [reply, setReply] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const { errorStatus } = useSelector((state) => commentSelector(state));\r\n\r\n  const addCommentHandle = (e) => {\r\n    setReply(e.target.value);\r\n  };\r\n  const onSaveComment = () => {\r\n    const createdAt = new Date().toISOString();\r\n\r\n    const options = {\r\n      body: reply,\r\n      userId: props.user.id,\r\n      postId: props.post.id,\r\n      createdAt: createdAt,\r\n      user: props.user,\r\n    };\r\n\r\n    dispatch(addCommentLoading(options));\r\n    setReply(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorStatus === \"addRejected\") {\r\n      setErrorMessage(\"*Can not add comment\");\r\n      setTimeout(() => {\r\n        setErrorMessage(\"\");\r\n      }, 4000);\r\n    } else if (errorStatus === \"addSuccess\") {\r\n      handleClose();\r\n    }\r\n    return () => {\r\n      dispatch(defaultError());\r\n    };\r\n  }, [dispatch, errorStatus]);\r\n\r\n  return (\r\n    <>\r\n      <Button bsPrefix={s.btn} onClick={handleShow}>\r\n        Reply\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Comment</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              placeholder={\"Add your text\"}\r\n              onChange={addCommentHandle}\r\n            />\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={onSaveComment}\r\n            disabled={reply === \"\"}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n          <div>\r\n            <span>{errorMessage}</span>\r\n          </div>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default AddNewComment;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"comment\":\"CommentsMain_comment__lE+oy\",\"userAvatar\":\"CommentsMain_userAvatar__lxpUt\",\"ava\":\"CommentsMain_ava__z0kpW\",\"action\":\"CommentsMain_action__uNJ3z\",\"btn\":\"CommentsMain_btn__p0+kQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"RemoveComment_btn__mN-Er\",\"messageError\":\"RemoveComment_messageError__BGZpb\"};","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  defaultError,\r\n  removeCommentLoading,\r\n} from \"../../../redux/slices/commentSlices/comments\";\r\nimport s from \"./RemoveComment.module.css\";\r\n\r\nconst RemoveComment = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [errorMessage, setErrorMessage] = useState();\r\n\r\n  useEffect(() => {\r\n    if (props.errorStatus === \"removeRejected\") {\r\n      setErrorMessage(\"**Can not remove comment\");\r\n      setTimeout(() => {\r\n        setErrorMessage(\"\");\r\n        dispatch(defaultError());\r\n      }, 4000);\r\n    }\r\n  }, [dispatch, props.errorStatus]);\r\n\r\n  const removeCommentHandle = (value) => {\r\n    dispatch(removeCommentLoading(value));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <span className={s.messageError}>{errorMessage}</span>\r\n      <button\r\n        className={s.btn}\r\n        type=\"submit\"\r\n        onClick={() => removeCommentHandle(props.comment)}\r\n      >\r\n        Remove\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default RemoveComment;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"UpdateReply_btn__XT3S+\",\"replyBtn\":\"UpdateReply_replyBtn__m4Mdn\",\"commentUpdate\":\"UpdateReply_commentUpdate__DvBvH\",\"container\":\"UpdateReply_container__dUAaT\"};","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport s from \"./UpdateReply.module.css\";\r\nimport {\r\n  defaultError,\r\n  updateCommentLoading,\r\n} from \"../../../redux/slices/commentSlices/comments\";\r\n// remove later\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\n\r\nconst UpdateReply = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const comment = props.comment;\r\n  const user = props.user;\r\n\r\n  const [updateComment, setUpdate] = useState(comment.body);\r\n  const [errorCommentMessage, setErrorCommentMessage] = useState();\r\n\r\n  const bodyChange = (e) => {\r\n    setUpdate(e.target.value);\r\n  };\r\n\r\n  const onSavePostClicked = () => {\r\n    const updatedAt = new Date().toISOString();\r\n    if (updateComment) {\r\n      const options = {\r\n        id: comment.id,\r\n        userId: user.id,\r\n        body: updateComment,\r\n        updatedAt: updatedAt,\r\n        postId: comment.postId,\r\n      };\r\n      dispatch(updateCommentLoading(options));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.errorStatus === \"editRejected\") {\r\n      setErrorCommentMessage(\"Can not update post\");\r\n      setTimeout(() => {\r\n        setErrorCommentMessage(\"\");\r\n      }, 5000);\r\n    } else if (props.errorStatus === \"editSuccess\") {\r\n      handleClose();\r\n    }\r\n\r\n    return () => {\r\n      dispatch(defaultError());\r\n    };\r\n  }, [dispatch, props.errorStatus]);\r\n\r\n  return (\r\n    <section className={s.secContainer}>\r\n      <Button bsPrefix={s.btn} onClick={handleShow}>\r\n        Edit\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Edit Comment</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={2}\r\n              placeholder={\"Add your text\"}\r\n              value={updateComment}\r\n              onChange={bodyChange}\r\n            />\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={onSavePostClicked}>\r\n            Save Changes\r\n          </Button>\r\n          <div>\r\n            <span className={s.notifyPostStatus}>{errorCommentMessage}</span>\r\n          </div>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </section>\r\n  );\r\n};\r\nexport default UpdateReply;\r\n","import React from \"react\";\r\nimport RemoveComment from \"./DeleteComment/RemoveComment\";\r\nimport s from \"./CommentsMain.module.css\";\r\nimport UpdateReply from \"./UpdateComment/UpdateReply\";\r\n\r\nconst CommentsManage = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      {props.user != null && (\r\n        <div>\r\n          {props.user.id === props.comment.userId && (\r\n            <div className={s.action}>\r\n              <RemoveComment\r\n                comment={props.comment.id}\r\n                errorStatus={props.errorStatus}\r\n              />\r\n              <UpdateReply\r\n                user={props.user}\r\n                comment={props.comment}\r\n                errorStatus={props.errorStatus}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default CommentsManage;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport s from \"./CommentsMain.module.css\";\r\nimport ava from \"./../../assets/images/empty.jpg\";\r\nimport CommentsManage from \"./CommentsManage\";\r\nimport { commentSelector } from \"../../redux/slices/commentSlices/commentSelectors\";\r\n\r\nconst CommentsMain = (props) => {\r\n  const user = JSON.parse(window.localStorage.getItem(\"user\"));\r\n\r\n  const { comments, errorStatus } = useSelector((state) =>\r\n    commentSelector(state)\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {comments.map((comment) => (\r\n        <div key={comment.id}>\r\n          {comment.postId === props.post.id && (\r\n            <div>\r\n              <div className={s.comment}>\r\n                <div>\r\n                  <div>\r\n                    <span>{comment.body}</span>\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <CommentsManage\r\n                    user={user}\r\n                    comment={comment}\r\n                    errorStatus={errorStatus}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className={s.ava}>\r\n                <img className={s.userAvatar}\r\n                  src={comment.user.avatar ? comment.user.avatar : ava}\r\n                  alt=\"your avatar\"\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default CommentsMain;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"UpdatePostMain_btn__jhbsj\",\"secContainer\":\"UpdatePostMain_secContainer__ufk9t\",\"editBody\":\"UpdatePostMain_editBody__GIZK8\",\"editTitle\":\"UpdatePostMain_editTitle__H0cwX\",\"messageError\":\"UpdatePostMain_messageError__+oOVk\",\"notifyPostStatus\":\"UpdatePostMain_notifyPostStatus__LNinD\"};","import React, { useState } from \"react\";\r\nimport {\r\n  defaultError,\r\n  updatePostLoading,\r\n} from \"../../../redux/slices/postSlices/posts\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport s from \"./UpdatePostMain.module.css\";\r\nimport { useEffect } from \"react\";\r\n// remove later\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\n\r\nconst UpdatePostMain = (props) => {\r\n  const errorStatus = props.errorStatus;\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  const dispatch = useDispatch();\r\n  const [title, setTitle] = useState(props.post.title);\r\n  const [body, setBody] = useState(props.post.body);\r\n  const [postStatus, setpostStatus] = useState();\r\n\r\n  const titleChange = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n  const bodyChange = (e) => {\r\n    setBody(e.target.value);\r\n  };\r\n  const onSavePostClicked = () => {\r\n    const updatedAt = new Date().toISOString();\r\n\r\n    if (title && body) {\r\n      const options = {\r\n        id: props.post.id,\r\n        title: title,\r\n        body: body,\r\n        updatedAt: updatedAt,\r\n        userId: props.user.id,\r\n      };\r\n      dispatch(updatePostLoading(options));\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (errorStatus === \"editSuccess\") {\r\n      setpostStatus(\"Saving...\");\r\n      setTimeout(() => {\r\n        setpostStatus(\"\");\r\n        handleClose();\r\n      }, 500);\r\n    } else if (errorStatus === \"editRejected\") {\r\n      setpostStatus(\"Post not saved. Try again later...\");\r\n      setTimeout(() => {\r\n        setpostStatus(\"\");\r\n      }, 5000);\r\n    }\r\n    return () => {\r\n      dispatch(defaultError());\r\n    };\r\n  }, [dispatch, errorStatus]);\r\n\r\n  return (\r\n    <section className={s.secContainer}>\r\n      <Button bsPrefix={s.btn} onClick={handleShow}>\r\n        Edit\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Edit Post</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Label>Post title</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={1}\r\n              placeholder={\"Add your text\"}\r\n              value={title}\r\n              onChange={titleChange}\r\n            />\r\n            <Form.Label>Post body</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={4}\r\n              placeholder={\"Add your text\"}\r\n              value={body}\r\n              onChange={bodyChange}\r\n            />\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={onSavePostClicked}>\r\n            Save Changes\r\n          </Button>\r\n          <div>\r\n            <span className={s.notifyPostStatus}>{postStatus}</span>\r\n          </div>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </section>\r\n  );\r\n};\r\nexport default UpdatePostMain;\r\n","import React from \"react\";\r\nimport s from \"./PostsMain.module.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport DeleteItem from \"./DeletePost/DeleteItem\";\r\nimport AddNewComment from \"../Comments/AddComment/AddNewComment\";\r\nimport CommentsMain from \"../Comments/CommentsMain\";\r\nimport UpdatePostMain from \"./UpdatePost/UpdatePostMain\";\r\n\r\nconst PostsManage = ({ post, perPage, currentPage, errorStatus }) => {\r\n  const user = JSON.parse(window.localStorage.getItem(\"user\"));\r\n\r\n  const { getCommentError } = useSelector((state) => {\r\n    return {\r\n      getCommentError: state.comment.getCommentError,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {getCommentError && (\r\n          <span className={s.messageError}>Can't upload comments</span>\r\n        )}\r\n      </div>\r\n      {user != null ? (\r\n        <div className={s.addComment}>\r\n          <div>\r\n            <AddNewComment\r\n              user={user}\r\n              post={post}\r\n              perPage={perPage}\r\n              currentPage={currentPage}\r\n            />\r\n          </div>\r\n          {user.id === post.userId && (\r\n            <div className={s.action}>\r\n              <div>\r\n                <UpdatePostMain\r\n                  user={user}\r\n                  post={post}\r\n                  errorStatus={errorStatus}\r\n                />\r\n              </div>\r\n              <div>\r\n                <DeleteItem\r\n                  post={post.id}\r\n                  perPage={perPage}\r\n                  currentPage={currentPage}\r\n                  errorStatus={errorStatus}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <h3 className={s.hidden}>Login for more opportunities</h3>\r\n      )}\r\n      <div>\r\n        <CommentsMain post={post} key={post.id} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default PostsManage;\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst getPosts = (state) => {\r\n  return state.posts;\r\n};\r\n\r\nexport const postsSelector = createSelector(getPosts, (posts) => {\r\n  return posts;\r\n});\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport s from \"./PostsMain.module.css\";\r\n\r\nimport { postLoading } from \"../../redux/slices/postSlices/posts\";\r\nimport AddPost from \"./AddPost/AddNewPost\";\r\nimport PostsManage from \"./PostsManage\";\r\nimport { postsSelector } from \"../../redux/slices/postSlices/postsSelectors\";\r\nimport { commentsLoading } from \"../../redux/slices/commentSlices/comments\";\r\nimport Pagination from \"../../components/Pagination/Pagination\";\r\n\r\nconst PostMain = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    posts,\r\n    totalPostCount,\r\n    perPage,\r\n    currentPage,\r\n    getPostsError,\r\n    errorStatus,\r\n  } = useSelector((state) => postsSelector(state));\r\n\r\n  const user = JSON.parse(window.localStorage.getItem(\"user\"));\r\n\r\n  useEffect(() => {\r\n    if (errorStatus === \"addSuccess\") {\r\n      dispatch(postLoading({ currentPage, perPage }));\r\n    }\r\n\r\n    dispatch(postLoading({ currentPage, perPage }));\r\n    dispatch(commentsLoading());\r\n  }, [dispatch, currentPage, perPage, errorStatus]);\r\n\r\n  const onChange = (currentPage) => {\r\n    dispatch(postLoading({ currentPage, perPage }));\r\n  };\r\n\r\n  const renderedPosts = posts.map((post) => (\r\n    <article key={post.id}>\r\n      <div className={s.info}>\r\n        <h3>{post.title}</h3>\r\n        <div>\r\n          <p>{post.body}</p>\r\n        </div>\r\n      </div>\r\n      <PostsManage\r\n        post={post}\r\n        perPage={perPage}\r\n        currentPage={currentPage}\r\n        user={user}\r\n        errorStatus={errorStatus}\r\n      />\r\n    </article>\r\n  ));\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <section className={s.mainSection}>\r\n        {currentPage === 1 && (\r\n          <AddPost\r\n            perPage={perPage}\r\n            currentPage={currentPage}\r\n            errorStatus={errorStatus}\r\n          />\r\n        )}\r\n        {getPostsError ? (\r\n          <span className={s.messageError}>*Something go wrong</span>\r\n        ) : (\r\n          renderedPosts\r\n        )}\r\n        <Pagination\r\n          totalPostCount={totalPostCount}\r\n          perPage={perPage}\r\n          currentPage={currentPage}\r\n          onChange={onChange}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostMain;\r\n"],"names":["props","pagesCount","Math","ceil","totalPostCount","perPage","pages","i","push","className","s","map","page","currentPage","onClick","onChange","errorStatus","dispatch","useDispatch","user","JSON","parse","window","localStorage","getItem","useState","errorMessage","setErrorMessage","title","setTitle","body","setBody","buttonStatus","setButtonStatus","useEffect","setTimeout","defaultError","htmlFor","type","id","name","e","target","value","createdAt","Date","toISOString","options","userId","addPostLoading","removeStatus","setRemoveStatus","post","removePostLoading","postLoading","commentSelector","createSelector","state","comment","reply","setReply","show","setShow","handleClose","useSelector","Button","bsPrefix","Modal","onHide","closeButton","Form","as","rows","placeholder","variant","postId","addCommentLoading","disabled","removeCommentLoading","updateComment","setUpdate","errorCommentMessage","setErrorCommentMessage","updatedAt","updateCommentLoading","comments","src","avatar","ava","alt","postStatus","setpostStatus","updatePostLoading","getCommentError","postsSelector","posts","getPostsError","commentsLoading","renderedPosts","Pagination"],"sourceRoot":""}