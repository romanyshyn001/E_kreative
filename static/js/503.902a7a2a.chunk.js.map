{"version":3,"file":"static/js/503.902a7a2a.chunk.js","mappings":"yKACA,EAA6B,8BAA7B,EAAmE,yBAAnE,EAAoG,yBAApG,EAAqI,yBAArI,EAAqK,wBAArK,EAAmM,uBAAnM,EAA0O,iCAA1O,EAA0R,gC,2DCkG1R,EA1FkB,SAACA,GACjB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAyCC,EAAAA,EAAAA,KACvC,SAACC,GAAD,OAAWA,EAAMC,OAAOC,aADlBC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,eAIhBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,SAAU,GACVC,MAAO,GACPC,YAAY,GAEdC,iBAAkBC,EAAAA,EAAAA,gBAClBC,SAAU,SAACC,GACTjB,GAASkB,EAAAA,EAAAA,IAAaD,OAY1B,OARAE,EAAAA,EAAAA,YAAU,WACJZ,GACFa,YAAW,WACTpB,GAASqB,EAAAA,EAAAA,SACR,OAEJ,CAACd,EAAgBP,KAGlB,iBAAKsB,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,KAChB,gBAAKD,UAAWC,QAElB,kBAAMD,UAAWC,EAASP,SAAUR,EAAOgB,aAA3C,WACE,wCAEA,kBAAOC,QAAQ,QAAf,uBAECC,EAAAA,EAAAA,GACC,QACA,iBACA,QACA,QACAlB,EAAOmB,aACPnB,EAAOoB,WACPpB,EAAOqB,OAAOjB,MACdW,GAEDf,EAAOsB,QAAQlB,OAASJ,EAAOuB,OAAOnB,QACrC,gBAAKU,UAAWC,EAAhB,SAAiCf,EAAOuB,OAAOnB,SAGjD,kBAAOa,QAAQ,WAAf,uBACCC,EAAAA,EAAAA,GACC,WACA,WACA,WACA,WACAlB,EAAOmB,aACPnB,EAAOoB,WACPpB,EAAOqB,OAAOlB,SACdY,GAGDf,EAAOsB,QAAQnB,UAAYH,EAAOuB,OAAOpB,WACxC,gBAAKW,UAAWC,EAAhB,SAAiCf,EAAOuB,OAAOpB,WAEhDJ,IACC,gBAAKe,UAAWC,EAAhB,uCAEF,kBAAOE,QAAQ,aAAf,0BACCC,EAAAA,EAAAA,GACC,aACA,GACA,aACA,WACAlB,EAAOmB,aACPnB,EAAOoB,WACP,KACAL,IAEF,0BACE,mBAAQD,UAAWC,EAAOS,KAAK,SAA/B,0BAKJ,yBAAM1B,IAAgB,SAAC,KAAD,CAAU2B,GAAI,kB,2CCpE1C,IAzBwB,SACtBC,EACAC,EACAC,EACAJ,EACAL,EACAC,EACAS,EACAC,GAEA,OACE,0BACE,kBACEJ,GAAIA,EACJC,YAAaA,EACbC,KAAMA,EACNJ,KAAMA,EACNO,SAAUZ,EACVa,OAAQZ,EACRa,MAAOJ,EACPf,UAAWgB,Q,mCCpBNvB,EAAa,CACtB2B,gBAAiBC,EAAAA,GAAW,CACxBhC,SAAUgC,EAAAA,KACNC,IAAI,GAAI,iCACRC,SAAS,aACbjC,MAAO+B,EAAAA,KACH/B,MAAM,iBACNiC,SAAS,eAEjBC,mBAAoBH,EAAAA,GAAW,CAC3BhC,SAAUgC,EAAAA,KACLC,IAAI,GAAI,iCACRC,SAAS,aACdjC,MAAO+B,EAAAA,KACF/B,MAAM,iBACNiC,SAAS,aACdE,UAAWJ,EAAAA,KACNE,SAAS,aACdG,SAAUL,EAAAA,KACLE,SAAS,aACdI,IAAKN,EAAAA,KACAE,SAAS,aACdK,gBAAiBP,EAAAA,KACZE,SAAS,aACTM,MAAM,CAACR,EAAAA,GAAQ,aAAc,0BAClCS,OAAQT,EAAAA,QAGhB","sources":["webpack://my-app/./src/components/Auth/Login/LoginMain.module.css?47ed","components/Auth/Login/LoginMain.jsx","components/Common/FormControl.js","utils/validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"background\":\"LoginMain_background__Dv6Cb\",\"shape\":\"LoginMain_shape__VTsRq\",\"login\":\"LoginMain_login__CsAVS\",\"check\":\"LoginMain_check__8qcQm\",\"text\":\"LoginMain_text__9-4TU\",\"btn\":\"LoginMain_btn__77nZZ\",\"authContainer\":\"LoginMain_authContainer__yqkTO\",\"ErrorMessage\":\"LoginMain_ErrorMessage__H-vZo\"};","import { useFormik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport s from \"./LoginMain.module.css\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { authorizeSuccess, loginLoading } from \"../../../redux/slices/authMe\";\r\nimport validators from \"../../../utils/validators/validators\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport createFormField from \"../../Common/FormControl\";\r\n\r\nconst LoginMain = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { isAuthorized, authorizeError } = useSelector(\r\n    (state) => state.authMe.authorize\r\n  );\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: \"\",\r\n      email: \"\",\r\n      rememberMe: false,\r\n    },\r\n    validationSchema: validators.validationLogin,\r\n    onSubmit: (credentials) => {\r\n      dispatch(loginLoading(credentials));\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (authorizeError) {\r\n      setTimeout(() => {\r\n        dispatch(authorizeSuccess());\r\n      }, 3000);\r\n    }\r\n  }, [authorizeError, dispatch]);\r\n\r\n  return (\r\n    <div className={s.authContainer}>\r\n      <div className={s.background}>\r\n        <div className={s.shape}></div>\r\n        <div className={s.shape}></div>\r\n      </div>\r\n      <form className={s.login} onSubmit={formik.handleSubmit}>\r\n        <h3>Login Here</h3>\r\n\r\n        <label htmlFor=\"email\">Username</label>\r\n\r\n        {createFormField(\r\n          \"email\",\r\n          \"Email or Phone\",\r\n          \"email\",\r\n          \"email\",\r\n          formik.handleChange,\r\n          formik.handleBlur,\r\n          formik.values.email,\r\n          s.text\r\n        )}\r\n        {formik.touched.email && formik.errors.email && (\r\n          <div className={s.ErrorMessage}>{formik.errors.email}</div>\r\n        )}\r\n\r\n        <label htmlFor=\"password\">Password</label>\r\n        {createFormField(\r\n          \"password\",\r\n          \"Password\",\r\n          \"password\",\r\n          \"password\",\r\n          formik.handleChange,\r\n          formik.handleBlur,\r\n          formik.values.password,\r\n          s.text\r\n        )}\r\n\r\n        {formik.touched.password && formik.errors.password && (\r\n          <div className={s.ErrorMessage}>{formik.errors.password}</div>\r\n        )}\r\n        {authorizeError && (\r\n          <div className={s.ErrorMessage}>Invalid mail or password</div>\r\n        )}\r\n        <label htmlFor=\"rememberMe\">Remember me</label>\r\n        {createFormField(\r\n          \"rememberMe\",\r\n          \"\",\r\n          \"rememberMe\",\r\n          \"checkbox\",\r\n          formik.handleChange,\r\n          formik.handleBlur,\r\n          null,\r\n          s.check\r\n        )}\r\n        <div>\r\n          <button className={s.btn} type=\"submit\">\r\n            Log In\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <div>{isAuthorized && <Navigate to={\"/posts\"} />}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default LoginMain;\r\n","import React from \"react\";\r\n\r\nconst createFormField = (\r\n  id,\r\n  placeholder,\r\n  name,\r\n  type,\r\n  handleChange,\r\n  handleBlur,\r\n  emailValue,\r\n  style\r\n) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        id={id}\r\n        placeholder={placeholder}\r\n        name={name}\r\n        type={type}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        value={emailValue}\r\n        className={style}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default createFormField;\r\n","import * as Yup from 'yup';\r\n\r\nexport const validators = {\r\n    validationLogin: Yup.object({\r\n        password: Yup.string()\r\n           .max(15, 'Must contain at least 20 char')\r\n           .required('*Required'),\r\n        email: Yup.string()\r\n           .email('Invalid Email')\r\n           .required('*Required')\r\n    }),\r\n    validationRegister: Yup.object({\r\n        password: Yup.string()\r\n            .max(15, 'Must contain at least 20 char')\r\n            .required('*Required'),\r\n        email: Yup.string()\r\n            .email('Invalid Email')\r\n            .required('*Required'),\r\n        firstName: Yup.string()\r\n            .required('*Required'),\r\n        lastName: Yup.string()\r\n            .required('*Required'),\r\n        age: Yup.string()\r\n            .required('*Required'),\r\n        passwordConfirm: Yup.string()\r\n            .required('*Required')\r\n            .oneOf([Yup.ref(\"password\")], \"Passwords do not match\"),\r\n        avatar: Yup.string()   \r\n    })\r\n} \r\nexport default validators\r\n"],"names":["props","dispatch","useDispatch","useSelector","state","authMe","authorize","isAuthorized","authorizeError","formik","useFormik","initialValues","password","email","rememberMe","validationSchema","validators","onSubmit","credentials","loginLoading","useEffect","setTimeout","authorizeSuccess","className","s","handleSubmit","htmlFor","createFormField","handleChange","handleBlur","values","touched","errors","type","to","id","placeholder","name","emailValue","style","onChange","onBlur","value","validationLogin","Yup","max","required","validationRegister","firstName","lastName","age","passwordConfirm","oneOf","avatar"],"sourceRoot":""}